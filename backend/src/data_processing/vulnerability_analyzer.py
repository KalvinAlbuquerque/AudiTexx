import csv
import json
from collections import defaultdict
import sys
import os

# Importa as funções de parsing do json_parser e csv_parser
from .json_parser import localizar_arquivos, extrair_targets, obter_vulnerabilidades_comum, contar_vulnerabilidades, extrair_dados_vulnerabilidades
from .csv_parser import obter_vulnerabilidades_comum_csv, contar_vulnerabilidades_csv, extrair_hosts_csv

# Importa as funções de geração de relatório (builders e compiler)
from ..report_generation.report_builder import gerar_relatorio_txt, gerar_relatorio_txt_csv, montar_conteudo_latex, montar_conteudo_latex_csv
# A função terminar_relatorio_preprocessado e compilar_latex serão chamadas nas rotas ou em outro orquestrador

# Importa a função de verificação de ausências do core.utils
from ..core.utils import verificar_e_salvar_vulnerabilidades_ausentes
# Importa a classe Config
from ..core.config import Config

# Inicializa a configuração
config = Config("config.json") # config.json está em AudiTex/backend/


def processar_relatorio_json(caminho_arquivos_json: str, caminho_salvar_relatorio_preprocessado: str) -> None:
    """
    Função que encontra os arquivos JSON de relatórios, conta as vulnerabilidades e gera o relatório TXT e LaTeX.
    
    Parâmetros:
    - caminho_arquivos_json (str): Caminho para o diretório onde os arquivos JSON dos scans web app estão.
    - caminho_salvar_relatorio_preprocessado (str): Caminho para o diretório onde os relatórios TXT e LaTeX pré-processados serão salvos.
    """
    caminhos_relatorios_json = localizar_arquivos(caminho_arquivos_json, "json")

    if caminhos_relatorios_json:
        # Contar as vulnerabilidades dividindo-as por criticas, altas, médias e baixas
        quantidade_vulnerabilidades_por_risco = contar_vulnerabilidades(caminhos_relatorios_json)

        # Obter vulnerabilidades comuns entre sites
        vulnerabilidades_comuns = obter_vulnerabilidades_comum(caminhos_relatorios_json)

        # Obter Vulnerabilidades não categorizadas
        nome_arquivo_ausentes = "vulnerabilidades_sites_ausentes.txt"
        
        # O caminho para o JSON de descrições vem da Config
        caminho_json_descricoes_webapp = os.path.join(config.caminho_report_templates_descriptions, "vulnerabilities_webapp.json")
        
        verificar_e_salvar_vulnerabilidades_ausentes(
            vulnerabilidades_comuns,
            caminho_json_descricoes_webapp,
            caminho_salvar_relatorio_preprocessado,
            nome_arquivo_ausentes
        )

        # Obter os targets
        targets = extrair_targets(caminhos_relatorios_json)

        # Gerar o relatório TXT
        gerar_relatorio_txt(
            f"{caminho_salvar_relatorio_preprocessado}/Sites_agrupados_por_vulnerabilidades.txt",
            quantidade_vulnerabilidades_por_risco,
            vulnerabilidades_comuns,
            targets
        )

        # Gerar o relatório em LaTeX (parte da lógica de construção)
        caminho_dados_vulnerabilidades_webapp = os.path.join(config.caminho_report_templates_descriptions, "vulnerabilities_webapp.json")
        caminho_descritivo_webapp = os.path.join(config.caminho_report_templates_descriptions, "descritivo_webapp.json")

        montar_conteudo_latex(
            f"{caminho_salvar_relatorio_preprocessado}/(LATEX)Sites_agrupados_por_vulnerabilidades.txt",
            f"{caminho_salvar_relatorio_preprocessado}/Sites_agrupados_por_vulnerabilidades.txt", # Arquivo TXT gerado
            caminho_dados_vulnerabilidades_webapp, # Dados detalhados das vulnerabilidades
            caminho_descritivo_webapp # Descritivo de categorias/subcategorias
        )

def processar_relatorio_csv(caminho_arquivos_csv: str, caminho_salvar_relatorio_preprocessado: str) -> None:
    """
    Função que encontra os arquivos CSV de relatórios, conta as vulnerabilidades e gera o relatório TXT e LaTeX.
    
    Parâmetros:
    - caminho_arquivos_csv (str): Caminho para o diretório onde os arquivos CSV dos scans de servidores estão.
    - caminho_salvar_relatorio_preprocessado (str): Caminho para o diretório onde os relatórios TXT e LaTeX pré-processados serão salvos.
    """
    caminhos_relatorios_csv = localizar_arquivos(caminho_arquivos_csv, "csv")
    if caminhos_relatorios_csv:
        # Obter vulnerabilidades comuns entre hosts
        vulnerabilidades_comuns_csv = obter_vulnerabilidades_comum_csv(caminhos_relatorios_csv)
        
        # Obter Vulnerabilidades não categorizadas
        nome_arquivo_ausentes = "vulnerabilidades_servidores_ausentes.txt"
        
        # O caminho para o JSON de descrições vem da Config
        caminho_json_descricoes_servers = os.path.join(config.caminho_report_templates_descriptions, "vulnerabilities_servers.json")
        
        verificar_e_salvar_vulnerabilidades_ausentes(
            vulnerabilidades_comuns_csv,
            caminho_json_descricoes_servers,
            caminho_salvar_relatorio_preprocessado,
            nome_arquivo_ausentes
        )

        # Contar as vulnerabilidades dividindo-as por criticas, altas, médias e baixas
        quantidade_vulnerabilidades_por_risco = contar_vulnerabilidades_csv(vulnerabilidades_comuns_csv)
        
        # Obter os hosts
        targets = extrair_hosts_csv(caminhos_relatorios_csv)

        # Gerar o relatório TXT
        gerar_relatorio_txt_csv(
            f"{caminho_salvar_relatorio_preprocessado}/Servidores_agrupados_por_vulnerabilidades.txt",
            quantidade_vulnerabilidades_por_risco,
            vulnerabilidades_comuns_csv,
            targets
        )

        # Gerar o relatório em LaTeX (parte da lógica de construção)
        caminho_dados_vulnerabilidades_servers = os.path.join(config.caminho_report_templates_descriptions, "vulnerabilities_servers.json")
        caminho_descritivo_servers = os.path.join(config.caminho_report_templates_descriptions, "descritivo_servers.json")
        
        montar_conteudo_latex_csv(
            f"{caminho_salvar_relatorio_preprocessado}/(LATEX)Servidores_agrupados_por_vulnerabilidades.txt",
            f"{caminho_salvar_relatorio_preprocessado}/Servidores_agrupados_por_vulnerabilidades.txt", # Arquivo TXT gerado
            caminho_dados_vulnerabilidades_servers, # Dados detalhados das vulnerabilidades
            caminho_descritivo_servers # Descritivo de categorias/subcategorias
        )

def extrair_quantidades_vulnerabilidades_por_site(output_path: str, caminhos_json_scans: str) -> None:
    """
    Extrai dados de vulnerabilidades por site a partir de arquivos JSON,
    organiza os dados e gera um relatório no formato CSV.
    
    Parâmetros:
    - output_path (str): Caminho para salvar o arquivo CSV de vulnerabilidades agrupadas por site.
    - caminhos_json_scans (str): Caminho para o diretório contendo os arquivos JSON dos scans web app.
    """
    try:
        files = localizar_arquivos(caminhos_json_scans, "json")

        new_rows = []
        print("Iniciando extração de vulnerabilidades...")

        for file in files:
            with open(file, 'r', encoding='utf-8') as f:
                data = json.load(f)

            extracted_data = extrair_dados_vulnerabilidades(data)
            print(f"Dados extraídos para o arquivo {file}: {extracted_data}")

            if extracted_data:
                new_rows.append(extracted_data)

        sorted_rows = sorted(new_rows, key=lambda x: x['Total'], reverse=True)

        with open(output_path, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = ['Site', 'Critical', 'High', 'Medium', 'Low', 'Total']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

            writer.writeheader()

            for row in sorted_rows:
                writer.writerow(row)

        print(f"Relatório de vulnerabilidades agrupadas por site gerado com sucesso em: {output_path}")

    except Exception as e:
        print(f"Erro ao extrair dados para o CSV de vulnerabilidades por site: {e}")